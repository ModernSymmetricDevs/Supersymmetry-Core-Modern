package belletti.supersymmetry.common.pattern;

import belletti.supersymmetry.Supersymmetry;
import belletti.supersymmetry.common.block.BlockCoolingCoil;
import belletti.supersymmetry.common.block.BlockDeposit;
import belletti.supersymmetry.common.data.SuSyBlocks;
import com.gregtechceu.gtceu.api.pattern.TraceabilityPredicate;
import com.gregtechceu.gtceu.api.pattern.error.PatternStringError;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.lowdragmc.lowdraglib.utils.BlockInfo;
import com.tterrag.registrate.util.entry.BlockEntry;
import com.tterrag.registrate.util.entry.RegistryEntry;
import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;

import java.util.Comparator;
import java.util.EnumMap;
import java.util.function.Supplier;

import static belletti.supersymmetry.common.data.SuSyBlocks.COOLING_COIL_BLOCKS;
import static belletti.supersymmetry.common.data.SuSyBlocks.DEPOSIT_BLOCKS;
import static com.gregtechceu.gtceu.api.pattern.Predicates.air;
import static net.minecraft.world.level.block.JigsawBlock.getFrontFacing;

public class SuSyPredicates {
    public static TraceabilityPredicate isTankSizeIndicatorPredicate() {
        return new TraceabilityPredicate(blockWorldState -> {
            if (air().test(blockWorldState)) {
                blockWorldState.getMatchContext().increment("tankSize", 1);
                return true;
            }
            return false;
        }, null);
    }

    public static TraceabilityPredicate coolingCoils() {
        return new TraceabilityPredicate(blockWorldState -> {
            var blockState = blockWorldState.getBlockState();
            for (EnumMap.Entry<BlockCoolingCoil.CoolingCoilType, BlockEntry<BlockCoolingCoil>> entry : COOLING_COIL_BLOCKS.entrySet()) {
                if (blockState.is(entry.getValue().get())) {
                    var stats = entry.getKey();
                    Object currentCoil = blockWorldState.getMatchContext().getOrPut("CoolingCoilType", stats);
                    if (!currentCoil.equals(stats)) {
                        blockWorldState.setError(new PatternStringError("gtceu.multiblock.pattern.error.coils"));
                        return false;
                    }
                    return true;
                }
            }
            return false;
        }, () -> COOLING_COIL_BLOCKS.entrySet().stream()
                // sort to make autogenerated jei previews not pick random coils each game load
                .sorted(Comparator.comparingInt(value -> value.getKey().getCoilTemperature()))
                .map(coil -> BlockInfo.fromBlockState(coil.getValue().get().defaultBlockState()))
                .toArray(BlockInfo[]::new))
                .addTooltips(Component.translatable("gtceu.multiblock.pattern.error.coils"));
    }

    public static TraceabilityPredicate oreDepositPredicate() {
        return new TraceabilityPredicate(blockWorldState -> {
            var blockState = blockWorldState.getBlockState();
            for (BlockDeposit blockDepositEntry : SuSyBlocks.DEPOSIT_BLOCKS.values().stream().map(RegistryEntry::get).toList()) {
                if (blockState.is(blockDepositEntry)) {
                    blockWorldState.getMatchContext().set("targetDepositBlockEntry", blockDepositEntry);
                    blockWorldState.getMatchContext().set("targetDepositBlockPos", blockWorldState.getPos());
                    return true;
                }
            }
            return false;
        }, () -> DEPOSIT_BLOCKS.values().stream()
                .map(coil -> BlockInfo.fromBlockState(coil.get().defaultBlockState()))
                .toArray(BlockInfo[]::new));
    }

    public static TraceabilityPredicate flareStackPredicate() {
        return new TraceabilityPredicate(blockWorldState -> {
            var blockState = blockWorldState.getBlockState();
            if(blockState.is(GTBlocks.FIREBOX_STEEL.get())) {
                blockWorldState.getMatchContext().increment("height", 1);
                return true;
            }
            return false;
        }, () -> new BlockInfo[]{BlockInfo.fromBlock(GTBlocks.FIREBOX_STEEL.get())});
    }

    public static TraceabilityPredicate smokeStackPredicate() {
        return new TraceabilityPredicate(blockWorldState -> {
            var blockState = blockWorldState.getBlockState();
            if(blockState.is(GTBlocks.CASING_STEEL_PIPE.get())) {
                blockWorldState.getMatchContext().increment("height", 1);
                return true;
            }
            return false;
        }, () -> new BlockInfo[]{BlockInfo.fromBlock(GTBlocks.CASING_STEEL_PIPE.get())});
    }
}
